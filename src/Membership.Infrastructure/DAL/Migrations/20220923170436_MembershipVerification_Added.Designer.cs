// <auto-generated />
using System;
using Membership.Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Membership.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(MembershipDbContext))]
    [Migration("20220923170436_MembershipVerification_Added")]
    partial class MembershipVerification_Added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("SequenceNo")
                .StartsAt(10L);

            modelBuilder.Entity("Membership.Core.Entities.Commons.FileAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActualFileName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("SavedFileName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("Membership.Core.Entities.Commons.OcrResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FrontPageId")
                        .HasColumnType("uuid");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastPageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OcrResults");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Disputes.DisputeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FromAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromMandalamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromPanchayatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromStateId")
                        .HasColumnType("uuid");

                    b.Property<string>("JustificationComment")
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubmittedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ToAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToMandalamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToPanchayatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToStateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromAreaId");

                    b.HasIndex("FromDistrictId");

                    b.HasIndex("FromMandalamId");

                    b.HasIndex("FromPanchayatId");

                    b.HasIndex("FromStateId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ToAreaId");

                    b.HasIndex("ToDistrictId");

                    b.HasIndex("ToMandalamId");

                    b.HasIndex("ToPanchayatId");

                    b.HasIndex("ToStateId");

                    b.ToTable("DisputeRequests");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Members.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressInDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("AddressInIndia")
                        .HasColumnType("text");

                    b.Property<Guid?>("AddressInMandalamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressInPanchayatId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("BloodGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<double>("CollectedAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("EmiratesIdExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EmiratesIdFrontPage")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmiratesIdLastPage")
                        .HasColumnType("uuid");

                    b.Property<string>("EmiratesIdNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MandalamId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ManuallyEntered")
                        .HasColumnType("boolean");

                    b.Property<string>("MembershipId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("MembershipNoPrefix")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("MembershipPeriodId")
                        .HasColumnType("uuid");

                    b.Property<long>("MembershipSequenceNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('\"SequenceNo\"')");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("PanchayatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PassportExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PassportFrontPage")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PassportLastPage")
                        .HasColumnType("uuid");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<Guid?>("Photo")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QualificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegisteredOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VerificationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("WelfareSchemeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("AreaId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MandalamId");

                    b.HasIndex("MembershipPeriodId");

                    b.HasIndex("PanchayatId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("RegisteredOrganizationId");

                    b.HasIndex("StateId");

                    b.HasIndex("WelfareSchemeId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Members.MembershipVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EdiFrontAndBackSideValid")
                        .HasColumnType("boolean");

                    b.Property<bool>("EidDOBValid")
                        .HasColumnType("boolean");

                    b.Property<bool>("EidDOEValid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EidFrontPage")
                        .HasColumnType("uuid");

                    b.Property<bool>("EidFullNameValid")
                        .HasColumnType("boolean");

                    b.Property<bool>("EidIssuePlaceValid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EidLastPage")
                        .HasColumnType("uuid");

                    b.Property<bool>("EidNationalityValid")
                        .HasColumnType("boolean");

                    b.Property<bool>("EidNumberValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<bool>("MemberVerified")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PassportFirstPage")
                        .HasColumnType("uuid");

                    b.Property<bool>("PassportFirstPageValid")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PassportLastPage")
                        .HasColumnType("uuid");

                    b.Property<bool>("PassportLastPageValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("VerifiedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.HasIndex("VerifiedUserId");

                    b.ToTable("MembershipVerifications");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.MembershipPeriods.MembershipPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnrollActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RegistrationEnded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RegistrationStarted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MembershipPeriods");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Professions.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Qualifications.Qualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.RegisteredOrganizations.RegisteredOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("RegisteredOrganizations");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.WelfareSchemes.WelfareScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("WelfareSchemes");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.Mandalam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Mandalams");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.Panchayat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MandalamId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("MandalamId");

                    b.ToTable("Panchayats");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Membership.Core.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CascadeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CascadeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisputeCommittee")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MandalamId")
                        .HasColumnType("uuid");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MandalamId");

                    b.HasIndex("StateId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Membership.Core.Entities.Users.UserLoginAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastIncorrectLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfIncorrectLoginAttempts")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserLoginAttempts");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.AreaReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AreaReadModel");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.DisputeRequestReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FromAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromMandalamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromPanchayatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromStateId")
                        .HasColumnType("uuid");

                    b.Property<string>("JustificationComment")
                        .HasColumnType("text");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubmittedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ToAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToMandalamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToPanchayatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToStateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromAreaId");

                    b.HasIndex("FromDistrictId");

                    b.HasIndex("FromMandalamId");

                    b.HasIndex("FromPanchayatId");

                    b.HasIndex("FromStateId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ToAreaId");

                    b.HasIndex("ToDistrictId");

                    b.HasIndex("ToMandalamId");

                    b.HasIndex("ToPanchayatId");

                    b.HasIndex("ToStateId");

                    b.ToTable("DisputeRequestReadModel");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.DistrictReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DistrictReadModel");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.MandalamReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MandalamReadModel");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.MemberReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("EmiratesIdExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmiratesIdNumber")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MandalamId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ManuallyEntered")
                        .HasColumnType("boolean");

                    b.Property<string>("MembershipId")
                        .HasColumnType("text");

                    b.Property<string>("MembershipNoPrefix")
                        .HasColumnType("text");

                    b.Property<Guid>("MembershipPeriodId")
                        .HasColumnType("uuid");

                    b.Property<long>("MembershipSequenceNo")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("PanchayatId")
                        .HasColumnType("uuid");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("AreaId");

                    b.HasIndex("MandalamId");

                    b.HasIndex("PanchayatId");

                    b.ToTable("MemberReadModel");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.PanchayatReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MandalamId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PanchayatReadModel");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.StateReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StateReadModel");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CascadeId")
                        .HasColumnType("uuid");

                    b.Property<string>("CascadeName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisputeCommittee")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MandalamId")
                        .HasColumnType("uuid");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MandalamId");

                    b.HasIndex("StateId");

                    b.ToTable("UserReadModel");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Disputes.DisputeRequest", b =>
                {
                    b.HasOne("Membership.Core.Entities.Nationalities.Area", "FromArea")
                        .WithMany()
                        .HasForeignKey("FromAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.District", "FromDistrict")
                        .WithMany()
                        .HasForeignKey("FromDistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.Mandalam", "FromMandalam")
                        .WithMany()
                        .HasForeignKey("FromMandalamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.Panchayat", "FromPanchayat")
                        .WithMany()
                        .HasForeignKey("FromPanchayatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.State", "FromState")
                        .WithMany()
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Memberships.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.Area", "ToArea")
                        .WithMany()
                        .HasForeignKey("ToAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.District", "ToDistrict")
                        .WithMany()
                        .HasForeignKey("ToDistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.Mandalam", "ToMandalam")
                        .WithMany()
                        .HasForeignKey("ToMandalamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.Panchayat", "ToPanchayat")
                        .WithMany()
                        .HasForeignKey("ToPanchayatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.State", "ToState")
                        .WithMany()
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromArea");

                    b.Navigation("FromDistrict");

                    b.Navigation("FromMandalam");

                    b.Navigation("FromPanchayat");

                    b.Navigation("FromState");

                    b.Navigation("Member");

                    b.Navigation("ToArea");

                    b.Navigation("ToDistrict");

                    b.Navigation("ToMandalam");

                    b.Navigation("ToPanchayat");

                    b.Navigation("ToState");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Members.Member", b =>
                {
                    b.HasOne("Membership.Core.Entities.Users.User", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("Membership.Core.Entities.Nationalities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.Mandalam", "Mandalam")
                        .WithMany()
                        .HasForeignKey("MandalamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Memberships.MembershipPeriods.MembershipPeriod", "MembershipPeriod")
                        .WithMany()
                        .HasForeignKey("MembershipPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Nationalities.Panchayat", "Panchayat")
                        .WithMany()
                        .HasForeignKey("PanchayatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Memberships.Professions.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Membership.Core.Entities.Memberships.Qualifications.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationId");

                    b.HasOne("Membership.Core.Entities.Memberships.RegisteredOrganizations.RegisteredOrganization", "RegisteredOrganization")
                        .WithMany()
                        .HasForeignKey("RegisteredOrganizationId");

                    b.HasOne("Membership.Core.Entities.Nationalities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Memberships.WelfareSchemes.WelfareScheme", "WelfareScheme")
                        .WithMany()
                        .HasForeignKey("WelfareSchemeId");

                    b.Navigation("Agent");

                    b.Navigation("Area");

                    b.Navigation("District");

                    b.Navigation("Mandalam");

                    b.Navigation("MembershipPeriod");

                    b.Navigation("Panchayat");

                    b.Navigation("Profession");

                    b.Navigation("Qualification");

                    b.Navigation("RegisteredOrganization");

                    b.Navigation("State");

                    b.Navigation("WelfareScheme");
                });

            modelBuilder.Entity("Membership.Core.Entities.Memberships.Members.MembershipVerification", b =>
                {
                    b.HasOne("Membership.Core.Entities.Memberships.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Core.Entities.Users.User", "VerifiedUser")
                        .WithMany()
                        .HasForeignKey("VerifiedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("VerifiedUser");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.Area", b =>
                {
                    b.HasOne("Membership.Core.Entities.Nationalities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.Mandalam", b =>
                {
                    b.HasOne("Membership.Core.Entities.Nationalities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Membership.Core.Entities.Nationalities.Panchayat", b =>
                {
                    b.HasOne("Membership.Core.Entities.Nationalities.Mandalam", "Mandalam")
                        .WithMany()
                        .HasForeignKey("MandalamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mandalam");
                });

            modelBuilder.Entity("Membership.Core.Entities.Users.User", b =>
                {
                    b.HasOne("Membership.Core.Entities.Nationalities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Membership.Core.Entities.Nationalities.Mandalam", "Mandalam")
                        .WithMany()
                        .HasForeignKey("MandalamId");

                    b.HasOne("Membership.Core.Entities.Nationalities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("District");

                    b.Navigation("Mandalam");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.DisputeRequestReadModel", b =>
                {
                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.AreaReadModel", "FromArea")
                        .WithMany()
                        .HasForeignKey("FromAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.DistrictReadModel", "FromDistrict")
                        .WithMany()
                        .HasForeignKey("FromDistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.MandalamReadModel", "FromMandalam")
                        .WithMany()
                        .HasForeignKey("FromMandalamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.PanchayatReadModel", "FromPanchayat")
                        .WithMany()
                        .HasForeignKey("FromPanchayatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.StateReadModel", "FromState")
                        .WithMany()
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.MemberReadModel", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.AreaReadModel", "ToArea")
                        .WithMany()
                        .HasForeignKey("ToAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.DistrictReadModel", "ToDistrict")
                        .WithMany()
                        .HasForeignKey("ToDistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.MandalamReadModel", "ToMandalam")
                        .WithMany()
                        .HasForeignKey("ToMandalamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.PanchayatReadModel", "ToPanchayat")
                        .WithMany()
                        .HasForeignKey("ToPanchayatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.StateReadModel", "ToState")
                        .WithMany()
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromArea");

                    b.Navigation("FromDistrict");

                    b.Navigation("FromMandalam");

                    b.Navigation("FromPanchayat");

                    b.Navigation("FromState");

                    b.Navigation("Member");

                    b.Navigation("ToArea");

                    b.Navigation("ToDistrict");

                    b.Navigation("ToMandalam");

                    b.Navigation("ToPanchayat");

                    b.Navigation("ToState");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.MemberReadModel", b =>
                {
                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.UserReadModel", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.AreaReadModel", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.MandalamReadModel", "Mandalam")
                        .WithMany()
                        .HasForeignKey("MandalamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.PanchayatReadModel", "Panchayat")
                        .WithMany()
                        .HasForeignKey("PanchayatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Area");

                    b.Navigation("Mandalam");

                    b.Navigation("Panchayat");
                });

            modelBuilder.Entity("Membership.Infrastructure.DAL.ReadModels.UserReadModel", b =>
                {
                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.DistrictReadModel", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.MandalamReadModel", "Mandalam")
                        .WithMany()
                        .HasForeignKey("MandalamId");

                    b.HasOne("Membership.Infrastructure.DAL.ReadModels.StateReadModel", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("District");

                    b.Navigation("Mandalam");

                    b.Navigation("State");
                });
#pragma warning restore 612, 618
        }
    }
}
